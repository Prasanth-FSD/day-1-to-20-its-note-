Day 16 - Async

setTimeout(): This method execute a func, after waiting a specified number of millisecond.

Syntax:
setTimeout(func, millisecond);

Example:
    <p>SetTimeout</p>
    <button onclick="setTimeout(timeOut, 3000)">Submit</button>
<script>
  function timeOut(){
    console.log("School Bell Rings!");
  }

setInterval(): This method repeat a given func at every given time interval.

Syntax:
setInterval(func, millisecond);

Example:

<p>SetInterval</p>
<button onclick="setInterval(timeOut, 3000)">Submit</button>
<script>
  function timeOut(){
    console.log("School Bell Rings!");
  }

  Task:
      <h1>SetInterval</h1>
    <p id="container"></p>
    <button onclick="setInterval(timeOut, 3000)">Submit</button>
<script>
  function timeOut(){
    document.getElementById("container").innerHTML += "Hello EveryOne!"
  }
</script>

Call Back: it is a func which uses one more func as a parameter.(map)

Javascript: Single threated execute single task at the time.

Synchronous: which execute all the code line by line.

Asynchronous: programming you can do task without waiting for a task to complete its execution.

Cooking: Sync(line by line)
       Step 1: Cook cake
       Step 2: Mix all incredients
       Step 3: Microwave 30mins
       Step 4: Eat cake
       Step 5: Juice

Cooking: Async(no need to wait)
       Step 1: Cook cake
       Step 2: Mix all incredients
       Step 3: Microwave 30mins
       Step 4: Juice
       Step 5: Eat cake

Example:

console.log("Started");

setTimeout(function timer(){
    console.log("2s Delay");
},2000)

console.log("Middle");

setTimeout(function timer(){
    console.log("5s Delay");
},5000)

console.log("Completed!");

1. CallStack: it is place in browser where it keep track the function that has to be called in the diagram.
              it will executed whatever the statement inside.

2. Web API: it is place where to the async operation are actually executed.

3. Event Queue: Queue is a data structure First Come First Serve(FIFO)
                it stores the async function which has to be executed next.

4. Event Loop: it is between call stack as well as the event Queue.
               the main role of the event loop is to check whether the call stack is empty or not.
               if it is empty it will push the code from Queue and it to call stack.
               the call stack execute the function.
